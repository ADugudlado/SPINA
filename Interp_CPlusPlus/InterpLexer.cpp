/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 18, 2009 10:09:25
 *
 *     -  From the grammar source file : Interp.g
 *     -                            On : 2009-10-13 22:36:55
 *     -                 for the lexer : InterpLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

#include <vector>
#include<iostream>
#include "Element.h"
#include "VariableElement.h"
#include "IntegerElement.h"
#include "MatrixValueElement.h"
#include "MatrixVariableElement.h"
#include "MatrixAssignmentOperationElement.h"
#include "MatrixPrintOperationElement.h"
#include "MatrixMultiplyOperationElement.h"
#include "MatrixAdditionOperationElement.h"
#include "AssignmentOperationElement.h"
#include "AdditionOperationElement.h"
#include "PrintOperationElement.h"
#include "MultiplyOperationElement.h"
#include "ParallelforOperationElement.h"

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "InterpLexer.h"
/* ----------------------------------------- */


/** String literals used by InterpLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR3_UCHAR	lit_1[]  = { 0x70, 0x61, 0x72, 0x61, 0x6C, 0x6C, 0x65, 0x6C, 0x66, 0x6F, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_2[]  = { 0x70, 0x72, 0x69, 0x6E, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_3[]  = { 0x2E, 0x2E,  ANTLR3_STRING_TERMINATOR};




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pInterpLexer_##scope##_SCOPE
#define SCOPE_STACK(scope)  pInterpLexer_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pInterpLexer_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

 
/* Macros for accessing things in a lexer
 */
#undef	    LEXER
#undef	    RECOGNIZER		    
#undef	    RULEMEMO		    
#undef	    GETCHARINDEX
#undef	    GETLINE
#undef	    GETCHARPOSITIONINLINE
#undef	    EMIT
#undef	    EMITNEW
#undef	    MATCHC
#undef	    MATCHS
#undef	    MATCHRANGE
#undef	    LTOKEN
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    INPUT
#undef	    STRSTREAM
#undef	    LA
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    LRECOVER
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    BACKTRACKING
#undef		MATCHANY
#undef		MEMOIZE
#undef		HAVEPARSEDRULE
#undef		GETTEXT
#undef		INDEX
#undef		SEEK
#undef		PUSHSTREAM
#undef		POPSTREAM
#undef		SETTEXT
#undef		SETTEXT8

#define	    LEXER					ctx->pLexer
#define	    RECOGNIZER			    LEXER->rec
#define		LEXSTATE				RECOGNIZER->state
#define		TOKSOURCE				LEXSTATE->tokSource
#define	    GETCHARINDEX()			LEXER->getCharIndex(LEXER)
#define	    GETLINE()				LEXER->getLine(LEXER)
#define	    GETTEXT()				LEXER->getText(LEXER)
#define	    GETCHARPOSITIONINLINE() LEXER->getCharPositionInLine(LEXER)
#define	    EMIT()					LEXSTATE->type = _type; LEXER->emit(LEXER)
#define	    EMITNEW(t)				LEXER->emitNew(LEXER, t)
#define	    MATCHC(c)				LEXER->matchc(LEXER, c)
#define	    MATCHS(s)				LEXER->matchs(LEXER, s)
#define	    MATCHRANGE(c1,c2)	    LEXER->matchRange(LEXER, c1, c2)
#define	    MATCHANY()				LEXER->matchAny(LEXER)
#define	    LTOKEN  				LEXSTATE->token
#define	    HASFAILED()				(LEXSTATE->failed == ANTLR3_TRUE)
#define	    BACKTRACKING			LEXSTATE->backtracking
#define	    FAILEDFLAG				LEXSTATE->failed
#define	    INPUT					LEXER->input
#define	    STRSTREAM				INPUT
#define		ISTREAM					INPUT->istream
#define		INDEX()					ISTREAM->index(ISTREAM)
#define		SEEK(n)					ISTREAM->seek(ISTREAM, n)
#define	    EOF_TOKEN				&(LEXSTATE->tokSource->eofToken)
#define	    HASEXCEPTION()			(LEXSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				LEXSTATE->exception
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    LRECOVER()				LEXER->recover(LEXER)
#define	    MARK()					ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define		MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define		HAVEPARSEDRULE(r)		RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		PUSHSTREAM(str)			LEXER->pushCharStream(LEXER, str)
#define		POPSTREAM()				LEXER->popCharStream(LEXER)
#define		SETTEXT(str)			LEXSTATE->text = str
#define		SKIP()					LEXSTATE->token = &(TOKSOURCE->skipToken)
#define		USER1					LEXSTATE->user1
#define		USER2					LEXSTATE->user2
#define		USER3					LEXSTATE->user3
#define		CUSTOM					LEXSTATE->custom
#define		RULEMEMO				LEXSTATE->ruleMemo
#define		DBG						RECOGNIZER->debugger

/* If we have been told we can rely on the standard 8 bit or 16 bit input
 * stream, then we can define our macros to use the direct pointers
 * in the input object, which is much faster than indirect calls. This
 * is really only significant to lexers with a lot of fragment rules (which
 * do not place LA(1) in a temporary at the moment) and even then
 * only if there is a lot of input (order of say 1M or so).
 */
#if	defined(ANTLR3_INLINE_INPUT_ASCII) || defined(ANTLR3_INLINE_INPUT_UTF16)

# ifdef	ANTLR3_INLINE_INPUT_ASCII

/* 8 bit "ASCII" (actually any 8 bit character set) */

#  define	    NEXTCHAR			((pANTLR3_UINT8)(INPUT->nextChar))
#  define	    DATAP				((pANTLR3_UINT8)(INPUT->data))

# else

#  define	    NEXTCHAR			((pANTLR3_UINT16)(INPUT->nextChar)) 
#  define	    DATAP				((pANTLR3_UINT16)(INPUT->data))

# endif

# define	    LA(n) ((NEXTCHAR + n) > (DATAP + INPUT->sizeBuf) ? ANTLR3_CHARSTREAM_EOF : (ANTLR3_UCHAR)(*(NEXTCHAR + n - 1)))
# define	    CONSUME()											\
{																	\
    if	(NEXTCHAR < (DATAP + INPUT->sizeBuf))						\
    {																\
		INPUT->charPositionInLine++;								\
		if  ((ANTLR3_UCHAR)(*NEXTCHAR) == INPUT->newlineChar)		\
		{															\
			INPUT->line++;											\
			INPUT->charPositionInLine	= 0;						\
			INPUT->currentLine		= (void *)(NEXTCHAR + 1);		\
		}															\
		INPUT->nextChar = (void *)(NEXTCHAR + 1);					\
    }																\
}

#else

// Pick up the input character by calling the input stream implementation.
//
#define	    CONSUME()				INPUT->istream->consume(INPUT->istream)
#define	    LA(n)					INPUT->istream->_LA(INPUT->istream, n)

#endif
#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/* Forward declare the locally static matching functions we have generated and any predicate functions.
 */
static ANTLR3_INLINE  void	mT__16    (pInterpLexer ctx);
static ANTLR3_INLINE  void	mT__17    (pInterpLexer ctx);
static ANTLR3_INLINE  void	mT__18    (pInterpLexer ctx);
static ANTLR3_INLINE  void	mT__19    (pInterpLexer ctx);
static ANTLR3_INLINE  void	mT__20    (pInterpLexer ctx);
static ANTLR3_INLINE  void	mT__21    (pInterpLexer ctx);
static ANTLR3_INLINE  void	mEND_OF_STATEMENT    (pInterpLexer ctx);
static ANTLR3_INLINE  void	mASSIGNMENT    (pInterpLexer ctx);
static ANTLR3_INLINE  void	mPLUS    (pInterpLexer ctx);
static ANTLR3_INLINE  void	mPRODUCT    (pInterpLexer ctx);
static ANTLR3_INLINE  void	mRSQBRACKET    (pInterpLexer ctx);
static ANTLR3_INLINE  void	mLSQBRACKET    (pInterpLexer ctx);
static ANTLR3_INLINE  void	mVARIABLE    (pInterpLexer ctx);
static ANTLR3_INLINE  void	mINT_LITERAL    (pInterpLexer ctx);
static ANTLR3_INLINE  void	mWHITESPACE    (pInterpLexer ctx);
static ANTLR3_INLINE  void	mMATRIXVARIABLE    (pInterpLexer ctx);
static ANTLR3_INLINE  void	mMATRIXVALUE    (pInterpLexer ctx);
static ANTLR3_INLINE  void	mRANGE    (pInterpLexer ctx);
static ANTLR3_INLINE  void	mTokens    (pInterpLexer ctx);
static void	InterpLexerFree(pInterpLexer ctx);

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



static void
InterpLexerFree  (pInterpLexer ctx)
{
    LEXER->free(LEXER);
    
    ANTLR3_FREE(ctx);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "Interp.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called InterpLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return 
 *     - Success pInterpLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pInterpLexer InterpLexerNew         
(pANTLR3_INPUT_STREAM instream)
{
	// See if we can create a new lexer with the standard constructor
	//
	return InterpLexerNewSSD(instream, NULL);
}

/** \brief Create a new lexer called InterpLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return 
 *     - Success pInterpLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pInterpLexer InterpLexerNewSSD         
(pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pInterpLexer ctx; // Context structure we will build and return

    ctx = (pInterpLexer) ANTLR3_CALLOC(1, sizeof(InterpLexer));

    if  (ctx == NULL)
    {
        // Failed to allocate memory for lexer context
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in InterpLexer.h here so you can get a sense
     * of what goes where.
     */
    
    /* Create a base lexer, using the supplied input stream
     */
    ctx->pLexer	= antlr3LexerNewStream(ANTLR3_SIZE_HINT, instream, state);
    
    /* Check that we allocated the memory correctly
     */
    if	(ctx->pLexer == NULL)
    {
		ANTLR3_FREE(ctx);
		return  NULL;
    }
    /* Install the implementation of our InterpLexer interface
     */
    ctx->mT__16	= mT__16;
    ctx->mT__17	= mT__17;
    ctx->mT__18	= mT__18;
    ctx->mT__19	= mT__19;
    ctx->mT__20	= mT__20;
    ctx->mT__21	= mT__21;
    ctx->mEND_OF_STATEMENT	= mEND_OF_STATEMENT;
    ctx->mASSIGNMENT	= mASSIGNMENT;
    ctx->mPLUS	= mPLUS;
    ctx->mPRODUCT	= mPRODUCT;
    ctx->mRSQBRACKET	= mRSQBRACKET;
    ctx->mLSQBRACKET	= mLSQBRACKET;
    ctx->mVARIABLE	= mVARIABLE;
    ctx->mINT_LITERAL	= mINT_LITERAL;
    ctx->mWHITESPACE	= mWHITESPACE;
    ctx->mMATRIXVARIABLE	= mMATRIXVARIABLE;
    ctx->mMATRIXVALUE	= mMATRIXVALUE;
    ctx->mRANGE	= mRANGE;
    ctx->mTokens	= mTokens;
    
    /** When the nextToken() call is made to this lexer's pANTLR3_TOKEN_SOURCE
     *  it will call mTokens() in this generated code, and will pass it the ctx
     * pointer of this lexer, not the context of the base lexer, so store that now.
     */
    ctx->pLexer->ctx	    = ctx;
    
    /**Install the token matching function
     */
    ctx->pLexer->mTokens = (void (*) (void *))(mTokens);
    
    ctx->getGrammarFileName	= getGrammarFileName;
    ctx->free		= InterpLexerFree;

    
    


    /* Return the newly built lexer to the caller
     */
    return  ctx;
}

/* =========================================================================
 * DFA tables for the lexer
 */
/** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 215:14: ( ( '{' ( INT_LITERAL ',' )* INT_LITERAL '}' ) ':' )*
 */
static const ANTLR3_INT32 dfa5_eot[7] =
    {
	-1, -1, -1, 6, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_eof[7] =
    {
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_min[7] =
    {
	123, 48, 44, 58, 48, -1, -1
    };
static const ANTLR3_INT32 dfa5_max[7] =
    {
	123, 57, 125, 58, 57, -1, -1
    };
static const ANTLR3_INT32 dfa5_accept[7] =
    {
	-1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa5_special[7] =
    {	
	-1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa5_T_empty	    NULL

static const ANTLR3_INT32 dfa5_T0[] =
    {
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa5_T1[] =
    {
	4, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 3
    };static const ANTLR3_INT32 dfa5_T2[] =
    {
	5
    };static const ANTLR3_INT32 dfa5_T3[] =
    {
	1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa5_transitions[] =
{
    dfa5_T3, dfa5_T0, dfa5_T1, dfa5_T2, dfa5_T0, dfa5_T_empty, dfa5_T_empty	
};


/* Declare tracking structure for Cyclic DFA 5
 */
static
ANTLR3_CYCLIC_DFA cdfa5
    =	{
	    5,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 215:14: ( ( '{' ( INT_LITERAL ',' )* INT_LITERAL '}' ) ':' )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa5_eot,	    /* EOT table			    */
	    dfa5_eof,	    /* EOF table			    */
	    dfa5_min,	    /* Minimum tokens for each state    */
	    dfa5_max,	    /* Maximum tokens for each state    */
	    dfa5_accept,	/* Accept table			    */
	    dfa5_special,	/* Special transition states	    */
	    dfa5_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 5
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 215:19: ( INT_LITERAL ',' )*
 */
static const ANTLR3_INT32 dfa4_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa4_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa4_min[4] =
    {
	48, 44, -1, -1
    };
static const ANTLR3_INT32 dfa4_max[4] =
    {
	57, 125, -1, -1
    };
static const ANTLR3_INT32 dfa4_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa4_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa4_T_empty	    NULL

static const ANTLR3_INT32 dfa4_T0[] =
    {
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa4_T1[] =
    {
	3, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa4_transitions[] =
{
    dfa4_T0, dfa4_T1, dfa4_T_empty, dfa4_T_empty	
};


/* Declare tracking structure for Cyclic DFA 4
 */
static
ANTLR3_CYCLIC_DFA cdfa4
    =	{
	    4,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 215:19: ( INT_LITERAL ',' )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa4_eot,	    /* EOT table			    */
	    dfa4_eof,	    /* EOF table			    */
	    dfa4_min,	    /* Minimum tokens for each state    */
	    dfa4_max,	    /* Maximum tokens for each state    */
	    dfa4_accept,	/* Accept table			    */
	    dfa4_special,	/* Special transition states	    */
	    dfa4_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 4
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 215:63: ( INT_LITERAL ',' )*
 */
static const ANTLR3_INT32 dfa6_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa6_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa6_min[4] =
    {
	48, 44, -1, -1
    };
static const ANTLR3_INT32 dfa6_max[4] =
    {
	57, 125, -1, -1
    };
static const ANTLR3_INT32 dfa6_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa6_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa6_T_empty	    NULL

static const ANTLR3_INT32 dfa6_T0[] =
    {
	2, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 3
    };static const ANTLR3_INT32 dfa6_T1[] =
    {
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa6_transitions[] =
{
    dfa6_T1, dfa6_T0, dfa6_T_empty, dfa6_T_empty	
};


/* Declare tracking structure for Cyclic DFA 6
 */
static
ANTLR3_CYCLIC_DFA cdfa6
    =	{
	    6,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 215:63: ( INT_LITERAL ',' )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa6_eot,	    /* EOT table			    */
	    dfa6_eof,	    /* EOF table			    */
	    dfa6_min,	    /* Minimum tokens for each state    */
	    dfa6_max,	    /* Maximum tokens for each state    */
	    dfa6_accept,	/* Accept table			    */
	    dfa6_special,	/* Special transition states	    */
	    dfa6_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 6
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1:1: Tokens : ( T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | END_OF_STATEMENT | ASSIGNMENT | PLUS | PRODUCT | RSQBRACKET | LSQBRACKET | VARIABLE | INT_LITERAL | WHITESPACE | MATRIXVARIABLE | MATRIXVALUE | RANGE );
 */
static const ANTLR3_INT32 dfa7_eot[37] =
    {
	-1, 17, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, 17, 21, -1, 17, 17, -1, 
	-1, -1, -1, -1, -1, 17, 17, 17, 17, 17, 30, 17, -1, 17, 17, 17, 17, 36, 
	-1
    };
static const ANTLR3_INT32 dfa7_eof[37] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa7_min[37] =
    {
	9, 65, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, 65, 46, -1, 65, 65, -1, 
	-1, -1, -1, -1, -1, 65, 65, 65, 65, 65, 65, 65, -1, 65, 65, 65, 65, 65, 
	-1
    };
static const ANTLR3_INT32 dfa7_max[37] =
    {
	125, 122, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, 122, 57, -1, 122, 122, 
	-1, -1, -1, -1, -1, -1, 122, 122, 122, 122, 122, 122, 122, -1, 122, 122, 
	122, 122, 122, -1
    };
static const ANTLR3_INT32 dfa7_accept[37] =
    {
	-1, -1, 2, 3, -1, 5, 7, 8, 9, 10, 11, 12, -1, -1, 15, -1, -1, 13, 16, 
	17, 4, 14, 18, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa7_special[37] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa7_T_empty	    NULL

static const ANTLR3_INT32 dfa7_T0[] =
    {
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 18, -1, -1, -1, -1, -1, 15, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 16, 12, 12, 12, 12, 
	12, 12, 12, 12
    };static const ANTLR3_INT32 dfa7_T1[] =
    {
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 18, -1, -1, -1, -1, -1, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 23, 12, 12, 12, 12, 
	12, 12, 12, 12
    };static const ANTLR3_INT32 dfa7_T2[] =
    {
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 18, -1, -1, -1, -1, -1, 25, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12
    };static const ANTLR3_INT32 dfa7_T3[] =
    {
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 18, -1, -1, -1, -1, -1, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12
    };static const ANTLR3_INT32 dfa7_T4[] =
    {
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 18, -1, -1, -1, -1, -1, 12, 12, 12, 12, 
	31, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12
    };static const ANTLR3_INT32 dfa7_T5[] =
    {
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 18, -1, -1, -1, -1, -1, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 32, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12
    };static const ANTLR3_INT32 dfa7_T6[] =
    {
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 18, -1, -1, -1, -1, -1, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 27, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12
    };static const ANTLR3_INT32 dfa7_T7[] =
    {
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 18, -1, -1, -1, -1, -1, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 29, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12
    };static const ANTLR3_INT32 dfa7_T8[] =
    {
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 18, -1, -1, -1, -1, -1, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 35, 12, 12, 12, 12, 
	12, 12, 12, 12
    };static const ANTLR3_INT32 dfa7_T9[] =
    {
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 18, -1, -1, -1, -1, -1, 12, 12, 12, 12, 
	12, 33, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12
    };static const ANTLR3_INT32 dfa7_T10[] =
    {
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 18, -1, -1, -1, -1, -1, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 34, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12
    };static const ANTLR3_INT32 dfa7_T11[] =
    {
	22, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13
    };static const ANTLR3_INT32 dfa7_T12[] =
    {
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 18, -1, -1, -1, -1, -1, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 28, 12, 12, 
	12, 12, 12, 12
    };static const ANTLR3_INT32 dfa7_T13[] =
    {
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 18, -1, -1, -1, -1, -1, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 12, 26, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12
    };static const ANTLR3_INT32 dfa7_T14[] =
    {
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 18, -1, -1, -1, -1, -1, 12, 12, 12, 12, 
	12, 12, 12, 12, 24, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12
    };static const ANTLR3_INT32 dfa7_T15[] =
    {
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19
    };static const ANTLR3_INT32 dfa7_T16[] =
    {
	14, 14, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, 2, 3, 9, 8, -1, -1, 
	-1, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, -1, 6, -1, 7, -1, -1, -1, 
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 11, -1, 10, -1, -1, -1, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 1, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 4, -1, 5
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa7_transitions[] =
{
    dfa7_T16, dfa7_T0, dfa7_T_empty, dfa7_T_empty, dfa7_T15, dfa7_T_empty, 
    dfa7_T_empty, dfa7_T_empty, dfa7_T_empty, dfa7_T_empty, dfa7_T_empty, 
    dfa7_T_empty, dfa7_T3, dfa7_T11, dfa7_T_empty, dfa7_T1, dfa7_T14, dfa7_T_empty, 
    dfa7_T_empty, dfa7_T_empty, dfa7_T_empty, dfa7_T_empty, dfa7_T_empty, 
    dfa7_T2, dfa7_T13, dfa7_T6, dfa7_T12, dfa7_T7, dfa7_T3, dfa7_T4, dfa7_T_empty, 
    dfa7_T5, dfa7_T9, dfa7_T10, dfa7_T8, dfa7_T3, dfa7_T_empty	
};


/* Declare tracking structure for Cyclic DFA 7
 */
static
ANTLR3_CYCLIC_DFA cdfa7
    =	{
	    7,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1:1: Tokens : ( T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | END_OF_STATEMENT | ASSIGNMENT | PLUS | PRODUCT | RSQBRACKET | LSQBRACKET | VARIABLE | INT_LITERAL | WHITESPACE | MATRIXVARIABLE | MATRIXVALUE | RANGE );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa7_eot,	    /* EOT table			    */
	    dfa7_eof,	    /* EOF table			    */
	    dfa7_min,	    /* Minimum tokens for each state    */
	    dfa7_max,	    /* Maximum tokens for each state    */
	    dfa7_accept,	/* Accept table			    */
	    dfa7_special,	/* Special transition states	    */
	    dfa7_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 7
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the lexer
 */ 

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 26:7: ( 'parallelfor' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__16
 *
 * Looks to match the characters the constitute the token T__16
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__16(pInterpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__16;
       
    
    // Interp.g:26:7: ( 'parallelfor' )
    // Interp.g:26:9: 'parallelfor'
    {
        MATCHS(lit_1); 
        if  (HASEXCEPTION())
        {
            goto ruleT__16Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__16Ex; /* Prevent compiler warnings */
    ruleT__16Ex: ;

}
// $ANTLR end T__16

//   Comes from: 27:7: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__17
 *
 * Looks to match the characters the constitute the token T__17
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__17(pInterpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__17;
       
    
    // Interp.g:27:7: ( '(' )
    // Interp.g:27:9: '('
    {
        MATCHC('('); 
        if  (HASEXCEPTION())
        {
            goto ruleT__17Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__17Ex; /* Prevent compiler warnings */
    ruleT__17Ex: ;

}
// $ANTLR end T__17

//   Comes from: 28:7: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__18
 *
 * Looks to match the characters the constitute the token T__18
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__18(pInterpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__18;
       
    
    // Interp.g:28:7: ( ')' )
    // Interp.g:28:9: ')'
    {
        MATCHC(')'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__18Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__18Ex; /* Prevent compiler warnings */
    ruleT__18Ex: ;

}
// $ANTLR end T__18

//   Comes from: 29:7: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__19
 *
 * Looks to match the characters the constitute the token T__19
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__19(pInterpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__19;
       
    
    // Interp.g:29:7: ( '{' )
    // Interp.g:29:9: '{'
    {
        MATCHC('{'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__19Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__19Ex; /* Prevent compiler warnings */
    ruleT__19Ex: ;

}
// $ANTLR end T__19

//   Comes from: 30:7: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__20
 *
 * Looks to match the characters the constitute the token T__20
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__20(pInterpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__20;
       
    
    // Interp.g:30:7: ( '}' )
    // Interp.g:30:9: '}'
    {
        MATCHC('}'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__20Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__20Ex; /* Prevent compiler warnings */
    ruleT__20Ex: ;

}
// $ANTLR end T__20

//   Comes from: 31:7: ( 'print' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__21
 *
 * Looks to match the characters the constitute the token T__21
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__21(pInterpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__21;
       
    
    // Interp.g:31:7: ( 'print' )
    // Interp.g:31:9: 'print'
    {
        MATCHS(lit_2); 
        if  (HASEXCEPTION())
        {
            goto ruleT__21Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__21Ex; /* Prevent compiler warnings */
    ruleT__21Ex: ;

}
// $ANTLR end T__21

//   Comes from: 205:17: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start END_OF_STATEMENT
 *
 * Looks to match the characters the constitute the token END_OF_STATEMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEND_OF_STATEMENT(pInterpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = END_OF_STATEMENT;
       
    
    // Interp.g:205:17: ( ';' )
    // Interp.g:205:19: ';'
    {
        MATCHC(';'); 
        if  (HASEXCEPTION())
        {
            goto ruleEND_OF_STATEMENTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleEND_OF_STATEMENTEx; /* Prevent compiler warnings */
    ruleEND_OF_STATEMENTEx: ;

}
// $ANTLR end END_OF_STATEMENT

//   Comes from: 206:11: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ASSIGNMENT
 *
 * Looks to match the characters the constitute the token ASSIGNMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mASSIGNMENT(pInterpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ASSIGNMENT;
       
    
    // Interp.g:206:11: ( '=' )
    // Interp.g:206:13: '='
    {
        MATCHC('='); 
        if  (HASEXCEPTION())
        {
            goto ruleASSIGNMENTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleASSIGNMENTEx; /* Prevent compiler warnings */
    ruleASSIGNMENTEx: ;

}
// $ANTLR end ASSIGNMENT

//   Comes from: 207:5: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PLUS
 *
 * Looks to match the characters the constitute the token PLUS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mPLUS(pInterpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = PLUS;
       
    
    // Interp.g:207:5: ( '+' )
    // Interp.g:207:7: '+'
    {
        MATCHC('+'); 
        if  (HASEXCEPTION())
        {
            goto rulePLUSEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto rulePLUSEx; /* Prevent compiler warnings */
    rulePLUSEx: ;

}
// $ANTLR end PLUS

//   Comes from: 208:8: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PRODUCT
 *
 * Looks to match the characters the constitute the token PRODUCT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mPRODUCT(pInterpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = PRODUCT;
       
    
    // Interp.g:208:8: ( '*' )
    // Interp.g:208:10: '*'
    {
        MATCHC('*'); 
        if  (HASEXCEPTION())
        {
            goto rulePRODUCTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto rulePRODUCTEx; /* Prevent compiler warnings */
    rulePRODUCTEx: ;

}
// $ANTLR end PRODUCT

//   Comes from: 209:11: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RSQBRACKET
 *
 * Looks to match the characters the constitute the token RSQBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRSQBRACKET(pInterpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RSQBRACKET;
       
    
    // Interp.g:209:11: ( ']' )
    // Interp.g:209:13: ']'
    {
        MATCHC(']'); 
        if  (HASEXCEPTION())
        {
            goto ruleRSQBRACKETEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleRSQBRACKETEx; /* Prevent compiler warnings */
    ruleRSQBRACKETEx: ;

}
// $ANTLR end RSQBRACKET

//   Comes from: 210:11: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LSQBRACKET
 *
 * Looks to match the characters the constitute the token LSQBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLSQBRACKET(pInterpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LSQBRACKET;
       
    
    // Interp.g:210:11: ( '[' )
    // Interp.g:210:13: '['
    {
        MATCHC('['); 
        if  (HASEXCEPTION())
        {
            goto ruleLSQBRACKETEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLSQBRACKETEx; /* Prevent compiler warnings */
    ruleLSQBRACKETEx: ;

}
// $ANTLR end LSQBRACKET

//   Comes from: 211:9: ( ( 'a' .. 'z' | 'A' .. 'Z' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start VARIABLE
 *
 * Looks to match the characters the constitute the token VARIABLE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mVARIABLE(pInterpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = VARIABLE;
       
    
    // Interp.g:211:9: ( ( 'a' .. 'z' | 'A' .. 'Z' )+ )
    // Interp.g:211:11: ( 'a' .. 'z' | 'A' .. 'Z' )+
    {
        // Interp.g:211:11: ( 'a' .. 'z' | 'A' .. 'Z' )+
        {
            int cnt1=0;

            for (;;)
            {
                int alt1=2;
        	{
        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	    */
        	    int LA1_0 = LA(1);
        	    if ( (((LA1_0 >= 'A') && (LA1_0 <= 'Z')) || ((LA1_0 >= 'a') && (LA1_0 <= 'z'))) ) 
        	    {
        	        alt1=1;
        	    }

        	}
        	switch (alt1) 
        	{
        	    case 1:
        	        // Interp.g:
        	        {
        	            if ( ((LA(1) >= 'A') && (LA(1) <= 'Z')) || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        	            {
        	                CONSUME();

        	            }
        	            else 
        	            {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	                LRECOVER();    goto ruleVARIABLEEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt1 >= 1 )
        		{
        		    goto loop1;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleVARIABLEEx;
        	}
        	cnt1++;
            }
            loop1: ;	/* Jump to here if this rule does not match */
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleVARIABLEEx; /* Prevent compiler warnings */
    ruleVARIABLEEx: ;

}
// $ANTLR end VARIABLE

//   Comes from: 212:12: ( ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INT_LITERAL
 *
 * Looks to match the characters the constitute the token INT_LITERAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mINT_LITERAL(pInterpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = INT_LITERAL;
       
    
    // Interp.g:212:12: ( ( '0' .. '9' )+ )
    // Interp.g:212:14: ( '0' .. '9' )+
    {
        // Interp.g:212:14: ( '0' .. '9' )+
        {
            int cnt2=0;

            for (;;)
            {
                int alt2=2;
        	{
        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	    */
        	    int LA2_0 = LA(1);
        	    if ( (((LA2_0 >= '0') && (LA2_0 <= '9'))) ) 
        	    {
        	        alt2=1;
        	    }

        	}
        	switch (alt2) 
        	{
        	    case 1:
        	        // Interp.g:212:15: '0' .. '9'
        	        {
        	            MATCHRANGE('0', '9'); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleINT_LITERALEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt2 >= 1 )
        		{
        		    goto loop2;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleINT_LITERALEx;
        	}
        	cnt2++;
            }
            loop2: ;	/* Jump to here if this rule does not match */
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleINT_LITERALEx; /* Prevent compiler warnings */
    ruleINT_LITERALEx: ;

}
// $ANTLR end INT_LITERAL

//   Comes from: 213:12: ( ( ' ' | '\\t' | '\\n' | '\\r' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WHITESPACE
 *
 * Looks to match the characters the constitute the token WHITESPACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWHITESPACE(pInterpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = WHITESPACE;
       
    
    // Interp.g:213:12: ( ( ' ' | '\\t' | '\\n' | '\\r' )+ )
    // Interp.g:213:14: ( ' ' | '\\t' | '\\n' | '\\r' )+
    {
        // Interp.g:213:14: ( ' ' | '\\t' | '\\n' | '\\r' )+
        {
            int cnt3=0;

            for (;;)
            {
                int alt3=2;
        	{
        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	    */
        	    int LA3_0 = LA(1);
        	    if ( (((LA3_0 >= '\t') && (LA3_0 <= '\n')) || LA3_0 == '\r' || LA3_0 == ' ') ) 
        	    {
        	        alt3=1;
        	    }

        	}
        	switch (alt3) 
        	{
        	    case 1:
        	        // Interp.g:
        	        {
        	            if ( ((LA(1) >= '\t') && (LA(1) <= '\n')) || LA(1) == '\r' || LA(1) == ' ' )
        	            {
        	                CONSUME();

        	            }
        	            else 
        	            {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	                LRECOVER();    goto ruleWHITESPACEEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt3 >= 1 )
        		{
        		    goto loop3;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleWHITESPACEEx;
        	}
        	cnt3++;
            }
            loop3: ;	/* Jump to here if this rule does not match */
        }
        {
            LEXSTATE->channel = HIDDEN; 
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleWHITESPACEEx; /* Prevent compiler warnings */
    ruleWHITESPACEEx: ;

}
// $ANTLR end WHITESPACE

//   Comes from: 214:15: ( VARIABLE LSQBRACKET RSQBRACKET )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MATRIXVARIABLE
 *
 * Looks to match the characters the constitute the token MATRIXVARIABLE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mMATRIXVARIABLE(pInterpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = MATRIXVARIABLE;
       
    
    // Interp.g:214:15: ( VARIABLE LSQBRACKET RSQBRACKET )
    // Interp.g:214:16: VARIABLE LSQBRACKET RSQBRACKET
    {
        /* 214:16: VARIABLE LSQBRACKET RSQBRACKET */
        mVARIABLE(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleMATRIXVARIABLEEx;
        }

        /* 214:16: VARIABLE LSQBRACKET RSQBRACKET */
        mLSQBRACKET(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleMATRIXVARIABLEEx;
        }

        /* 214:16: VARIABLE LSQBRACKET RSQBRACKET */
        mRSQBRACKET(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleMATRIXVARIABLEEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleMATRIXVARIABLEEx; /* Prevent compiler warnings */
    ruleMATRIXVARIABLEEx: ;

}
// $ANTLR end MATRIXVARIABLE

//   Comes from: 215:12: ( ( ( '{' ( INT_LITERAL ',' )* INT_LITERAL '}' ) ':' )* ( '{' ( INT_LITERAL ',' )* INT_LITERAL '}' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MATRIXVALUE
 *
 * Looks to match the characters the constitute the token MATRIXVALUE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mMATRIXVALUE(pInterpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = MATRIXVALUE;
       
    
    // Interp.g:215:12: ( ( ( '{' ( INT_LITERAL ',' )* INT_LITERAL '}' ) ':' )* ( '{' ( INT_LITERAL ',' )* INT_LITERAL '}' ) )
    // Interp.g:215:14: ( ( '{' ( INT_LITERAL ',' )* INT_LITERAL '}' ) ':' )* ( '{' ( INT_LITERAL ',' )* INT_LITERAL '}' )
    {

        // Interp.g:215:14: ( ( '{' ( INT_LITERAL ',' )* INT_LITERAL '}' ) ':' )*

        for (;;)
        {
            int alt5=2;
            alt5 = cdfa5.predict(ctx, RECOGNIZER, ISTREAM, &cdfa5);
            if  (HASEXCEPTION())
            {
                goto ruleMATRIXVALUEEx;
            }

            switch (alt5) 
            {
        	case 1:
        	    // Interp.g:215:15: ( '{' ( INT_LITERAL ',' )* INT_LITERAL '}' ) ':'
        	    {
        	        // Interp.g:215:15: ( '{' ( INT_LITERAL ',' )* INT_LITERAL '}' )
        	        // Interp.g:215:16: '{' ( INT_LITERAL ',' )* INT_LITERAL '}'
        	        {
        	            MATCHC('{'); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleMATRIXVALUEEx;
        	            }


        	            // Interp.g:215:19: ( INT_LITERAL ',' )*

        	            for (;;)
        	            {
        	                int alt4=2;
        	                alt4 = cdfa4.predict(ctx, RECOGNIZER, ISTREAM, &cdfa4);
        	                if  (HASEXCEPTION())
        	                {
        	                    goto ruleMATRIXVALUEEx;
        	                }

        	                switch (alt4) 
        	                {
        	            	case 1:
        	            	    // Interp.g:215:20: INT_LITERAL ','
        	            	    {
        	            	        /* 215:20: INT_LITERAL ',' */
        	            	        mINT_LITERAL(ctx ); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto ruleMATRIXVALUEEx;
        	            	        }

        	            	        MATCHC(','); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto ruleMATRIXVALUEEx;
        	            	        }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop4;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop4: ; /* Jump out to here if this rule does not match */

        	            /* 215:16: '{' ( INT_LITERAL ',' )* INT_LITERAL '}' */
        	            mINT_LITERAL(ctx ); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleMATRIXVALUEEx;
        	            }

        	            MATCHC('}'); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleMATRIXVALUEEx;
        	            }


        	        }

        	        MATCHC(':'); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleMATRIXVALUEEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop5;	/* break out of the loop */
        	    break;
            }
        }
        loop5: ; /* Jump out to here if this rule does not match */

        // Interp.g:215:59: ( '{' ( INT_LITERAL ',' )* INT_LITERAL '}' )
        // Interp.g:215:60: '{' ( INT_LITERAL ',' )* INT_LITERAL '}'
        {
            MATCHC('{'); 
            if  (HASEXCEPTION())
            {
                goto ruleMATRIXVALUEEx;
            }


            // Interp.g:215:63: ( INT_LITERAL ',' )*

            for (;;)
            {
                int alt6=2;
                alt6 = cdfa6.predict(ctx, RECOGNIZER, ISTREAM, &cdfa6);
                if  (HASEXCEPTION())
                {
                    goto ruleMATRIXVALUEEx;
                }

                switch (alt6) 
                {
            	case 1:
            	    // Interp.g:215:64: INT_LITERAL ','
            	    {
            	        /* 215:64: INT_LITERAL ',' */
            	        mINT_LITERAL(ctx ); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleMATRIXVALUEEx;
            	        }

            	        MATCHC(','); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleMATRIXVALUEEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop6;	/* break out of the loop */
            	    break;
                }
            }
            loop6: ; /* Jump out to here if this rule does not match */

            /* 215:60: '{' ( INT_LITERAL ',' )* INT_LITERAL '}' */
            mINT_LITERAL(ctx ); 
            if  (HASEXCEPTION())
            {
                goto ruleMATRIXVALUEEx;
            }

            MATCHC('}'); 
            if  (HASEXCEPTION())
            {
                goto ruleMATRIXVALUEEx;
            }


        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleMATRIXVALUEEx; /* Prevent compiler warnings */
    ruleMATRIXVALUEEx: ;

}
// $ANTLR end MATRIXVALUE

//   Comes from: 216:6: ( INT_LITERAL '..' INT_LITERAL )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RANGE
 *
 * Looks to match the characters the constitute the token RANGE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRANGE(pInterpLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RANGE;
       
    
    // Interp.g:216:6: ( INT_LITERAL '..' INT_LITERAL )
    // Interp.g:216:8: INT_LITERAL '..' INT_LITERAL
    {
        /* 216:8: INT_LITERAL '..' INT_LITERAL */
        mINT_LITERAL(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleRANGEEx;
        }

        MATCHS(lit_3); 
        if  (HASEXCEPTION())
        {
            goto ruleRANGEEx;
        }


        /* 216:8: INT_LITERAL '..' INT_LITERAL */
        mINT_LITERAL(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleRANGEEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleRANGEEx; /* Prevent compiler warnings */
    ruleRANGEEx: ;

}
// $ANTLR end RANGE

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
static void 
mTokens(pInterpLexer ctx)
{
    {
        //  Interp.g:1:8: ( T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | END_OF_STATEMENT | ASSIGNMENT | PLUS | PRODUCT | RSQBRACKET | LSQBRACKET | VARIABLE | INT_LITERAL | WHITESPACE | MATRIXVARIABLE | MATRIXVALUE | RANGE )
        
        ANTLR3_UINT32 alt7;

        alt7=18;

        alt7 = cdfa7.predict(ctx, RECOGNIZER, ISTREAM, &cdfa7);
        if  (HASEXCEPTION())
        {
            goto ruleTokensEx;
        }

        switch (alt7) 
        {
    	case 1:
    	    // Interp.g:1:10: T__16
    	    {
    	        /* 1:10: T__16 */
    	        mT__16(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // Interp.g:1:16: T__17
    	    {
    	        /* 1:16: T__17 */
    	        mT__17(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // Interp.g:1:22: T__18
    	    {
    	        /* 1:22: T__18 */
    	        mT__18(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 4:
    	    // Interp.g:1:28: T__19
    	    {
    	        /* 1:28: T__19 */
    	        mT__19(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 5:
    	    // Interp.g:1:34: T__20
    	    {
    	        /* 1:34: T__20 */
    	        mT__20(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 6:
    	    // Interp.g:1:40: T__21
    	    {
    	        /* 1:40: T__21 */
    	        mT__21(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 7:
    	    // Interp.g:1:46: END_OF_STATEMENT
    	    {
    	        /* 1:46: END_OF_STATEMENT */
    	        mEND_OF_STATEMENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 8:
    	    // Interp.g:1:63: ASSIGNMENT
    	    {
    	        /* 1:63: ASSIGNMENT */
    	        mASSIGNMENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 9:
    	    // Interp.g:1:74: PLUS
    	    {
    	        /* 1:74: PLUS */
    	        mPLUS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 10:
    	    // Interp.g:1:79: PRODUCT
    	    {
    	        /* 1:79: PRODUCT */
    	        mPRODUCT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 11:
    	    // Interp.g:1:87: RSQBRACKET
    	    {
    	        /* 1:87: RSQBRACKET */
    	        mRSQBRACKET(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 12:
    	    // Interp.g:1:98: LSQBRACKET
    	    {
    	        /* 1:98: LSQBRACKET */
    	        mLSQBRACKET(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 13:
    	    // Interp.g:1:109: VARIABLE
    	    {
    	        /* 1:109: VARIABLE */
    	        mVARIABLE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 14:
    	    // Interp.g:1:118: INT_LITERAL
    	    {
    	        /* 1:118: INT_LITERAL */
    	        mINT_LITERAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 15:
    	    // Interp.g:1:130: WHITESPACE
    	    {
    	        /* 1:130: WHITESPACE */
    	        mWHITESPACE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 16:
    	    // Interp.g:1:141: MATRIXVARIABLE
    	    {
    	        /* 1:141: MATRIXVARIABLE */
    	        mMATRIXVARIABLE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 17:
    	    // Interp.g:1:156: MATRIXVALUE
    	    {
    	        /* 1:156: MATRIXVALUE */
    	        mMATRIXVALUE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 18:
    	    // Interp.g:1:168: RANGE
    	    {
    	        /* 1:168: RANGE */
    	        mRANGE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;

        }
    }

    
    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */ 


/* End of code
 * =============================================================================
 */
